1. Linux-常用命令
    * [工具参考篇](https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/strace.html)
    * blktrace/iowatcher
    * mount[confusion about mount options](https://unix.stackexchange.com/questions/117414/confusion-about-mount-options)
    * 域套接字
    * 如何编写TUI程序(https://github.com/marcusolsson/tui-go)
1. Linux-安全
    * [红帽企业版 Linux 7安全性指南](https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/security_guide/index)
1. 文件系统
    * overlay2文件系统的使用：[Example OverlayFS Usage [duplicate]](https://askubuntu.com/questions/699565/example-overlayfs-usage)
1. 操作系统安装
    * cobbler：https://www.cnblogs.com/yanjieli/p/11016825.html
    * ubuntu
        * 如何修改rootfs
        * resize-helper
        * 查看已安装的包 https://blog.csdn.net/sunchenzl/article/details/82117212
1. go 分析工具 https://golang.org/pkg/net/http/pprof/
    * [如何使用go pprof定位内存泄露](http://team.jiunile.com/blog/2020/09/go-pprof.html)
    * [Golang 大杀器之性能剖析 PProf](https://www.jianshu.com/p/4e4ff6be6af9)
    * [How to run go pprof on Docker daemon](https://gist.github.com/Jimmy-Xu/85fb01cd7620454c6d65)
1. Excalidraw 画图工具
    * https://github.com/excalidraw/excalidraw
    * https://learnku.com/articles/47662
1. tcp
    * close_wait会占用文件描述符
    * time_wait不会占用
    * [TCP协议的滑动窗口具体是怎样控制流量的？](https://www.zhihu.com/question/32255109/answer/898371009)
1. java
    * [JVM ：关于捕获 Java Heap Dump 的6种方式](https://blog.csdn.net/u010647035/article/details/86563736)
    * 如何定位java进程crash core Dump
    * [Netty堆外内存泄漏排查，这一篇全讲清楚了](https://juejin.cn/post/6844904036672471048)
    * [Netty堆外内存泄漏排查，这一篇全讲清楚了](https://segmentfault.com/a/1190000021469481)
        * -Dio.netty.leakDetectionLevel=paranoid 可以设置泄漏检测级别
        * -Dio.netty.leakDetection.targetRecords=100 可以设置内存泄漏的统计数量
    * [Netty 防止内存泄漏措施](https://zhuanlan.zhihu.com/p/58444143)
        * 消息堆积也可导致内存泄漏
        * ChannelOutboundBuffer.incrementPendingOutboundBytes
        * netty 读写水位控制，ChannelOption.WRITE_BUFFER_WATER_MARK，默认值可以看DefaultChannelConfig的writeBufferWaterMark字段
1. linker
1. Linux-异常处理（中断）
    * https://www.cnblogs.com/gulan-zmc/p/11604437.html
    * [Linux的中断处理机制 [一] - 数据结构(1)](https://zhuanlan.zhihu.com/p/83709066)
    * [Linux的中断处理机制 [二] - 数据结构(2)](https://zhuanlan.zhihu.com/p/85353687)
    * [Linux的中断处理机制 [三] - hardirq](https://zhuanlan.zhihu.com/p/85454778)
    * [Linux 中断](https://zhuanlan.zhihu.com/p/94788008)
    * [Linux 内核中断内幕](https://www.ibm.com/developerworks/cn/linux/l-cn-linuxkernelint/index.html)
    * [彻底搞懂异常控制流](https://www.cnblogs.com/niuyourou/p/12097856.html)
    * [嵌入式杂谈之中断向量表](https://zhuanlan.zhihu.com/p/125480457)
1. k8s
    * 调度
        * [Kubernetes Pod调度入门](https://blog.frognew.com/2017/06/kubernetes-scheduling.html)
    * k8s.io/api k8s.io/apimachinery k8s.io/client-go 版本不匹配
    * ipvs
        * [IPVS从入门到精通kube-proxy实现原理](https://zhuanlan.zhihu.com/p/94418251)
    * oam [5分钟带你快速入门和了解 OAM Kubernetes](https://www.cnblogs.com/ants/p/13300407.html)
1. [CPU 和 GPU 的区别是什么？](https://www.zhihu.com/question/19903344)
1. dracut
1. 方法论
    * [epoll和select](https://zhuanlan.zhihu.com/p/64771809)
    * Kiss原则
1. mysql
    * [解决死锁之路 - 学习事务与隔离级别](https://www.aneasystone.com/archives/2017/10/solving-dead-locks-one.html)
    * [解决死锁之路 - 了解常见的锁类型](https://www.aneasystone.com/archives/2017/11/solving-dead-locks-two.html)
    * [解决死锁之路 - 常见 SQL 语句的加锁分析](https://www.aneasystone.com/archives/2017/12/solving-dead-locks-three.html)
    * [解决死锁之路（终结篇） - 再见死锁](https://www.aneasystone.com/archives/2018/04/solving-dead-locks-four.html)
    * mvcc 客户端1更新某一行，提交，然后客户端更新同一行，回滚的case（回滚时也会比较版本号，否则就把已经提交的数据覆盖了）
    * mysql索引如何存储数据，联合索引？[联合索引在B+树上的存储结构及数据查找方式](https://blog.csdn.net/ibigboy/article/details/104571930?depth_1-)
1. 面试
    * java程序退出了，有什么方法可以分析
    * mybatis延迟加载
    * redis集群相关的知识点
        * [Redis集群方案应该怎么做？](https://www.zhihu.com/question/21419897)
        * 普通hash --> 一致性hash，本质上就是固定模的长度，在增加或删除节点后hash求模的值不变
        * presharding，假设集群最大容量是50台机器，而最开始只有5台，那可以在5台机器上，每台机器跑10个副本，当需要扩容的时候，进行数据拷贝即可（通过主从配置）。同时节点宕机也不会带来更大的问题
        * 集群中的每个节点再加主从
        * [一致性哈希和哈希槽对比](https://www.jianshu.com/p/4163916a2a8a)
        * [如何发现 Redis 热点 Key ，解决方案有哪些？](https://zhuanlan.zhihu.com/p/104942776)
        * [Redis为什么是单线程的](https://www.cnblogs.com/tuyang1129/p/12822501.html)
            * redis是基于内存的操作，cpu不是瓶颈
            * 单线程的好处：简单
        * redis如何实现过期
            * 惰性删除：访问的时候进行过期检查，需要有额外的后台线程来执行真正的物理删除，以免占用内存
            * 定期删除：从过期字典中随机取出20个键，删除这20个建中过期的键，若比例大于25%，那么重复该步骤（需要控制扫描速度，以免消耗大量的cpu）
    * 算法题combinationSum2
    * 1.8把锁粒度降低有没有坏处
    * mmap：系统调用使得进程之间通过映射同一个普通文件实现共享内存，普通文件被映射到进程地址空间后，进程可以像访问普通内存一样对文件进行访问，不必再调用read()，write（）等操作
    * 打开文件做了几次拷贝
        * [深度理解 Linux 读取文件过程！](https://zhuanlan.zhihu.com/p/371574406)
    * 最大子数组和
    * 并发包：CompletableFuture
    * ConcurrentHashMap
        * 1.8做了哪些优化？
            1. 分段锁改成cas+syn
            1. 当碰撞过多时，用红黑树而非链表
    * [Cache 和 Buffer 都是缓存，主要区别是什么？](https://www.zhihu.com/question/26190832)
    * 数据库范式